variables:
  DOCKER_DRIVER: overlay2
  DOCKER_AUTH_CONFIG: $CI_DOCKER_AUTH_CONFIG
  NPM_REGISTRY: nexus3.tecna.pl/repository/npm-private-releases
  NPM_PROXY: nexus3.tecna.pl/repository/npm-private

stages:
  - prepare
  - build
  - containerize
  - publish # no need to split it into separate stages, we can also avoid passing artifacts that way


npm-install:
  stage: prepare
  image: docker.tecna.pl/node:lts
  script:
    - npm config set registry https://${NPM_PROXY}
    - npm set //${NPM_REGISTRY}:_authToken=${NPM_TOKEN}
    - npm set //${NPM_PROXY}:_authToken=${NPM_TOKEN}
    - npm install
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 week


build-storybook:
  stage: build
  image: docker.tecna.pl/node:lts
  dependencies:
    - npm-install
  script:
    - npm run build-storybook
  artifacts:
    paths:
      - storybook-static
  only:
    - dev

docker-push-storybook:
  stage: containerize
  image: docker.tecna.pl/docker
  dependencies:
    - build-storybook
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD ${DOWNSTREAM_REPO}
    - docker login -u $UPSTREAM_REPO_USER -p $UPSTREAM_REPO_PASSWORD ${UPSTREAM_REPO}
  script:
    - docker build -f Dockerfile.storybook --build-arg "NEXUS3_URL=${UPSTREAM_REPO}" -t ${DOWNSTREAM_REPO}/$GROUP_NAME/$APP_NAME:storybook .
    - docker push ${DOWNSTREAM_REPO}/$GROUP_NAME/$APP_NAME:storybook
  only:
    - dev


npm-publish:
  stage: publish
  image: docker.tecna.pl/node:lts
  script:
    - echo "$NPM_REGISTRY_CONFIG" > ~/.npmrc
    - npm install
    - npm run build
    - npm run publish:nexus
  only:
    - master




